// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Mtd.OrderMaker.Dbs.Entity;

namespace Mtd.OrderMaker.Dbs.Migrations
{
    [DbContext(typeof(OrderMakerContext))]
    partial class OrderMakerContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Mtd.OrderMaker.Dbs.Entity.MtdApproval", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("description")
                        .HasColumnType("varchar(512)");

                    b.Property<Guid>("MtdFormId")
                        .HasColumnName("mtd_form")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("varchar(120)");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasName("id_UNIQUE");

                    b.HasIndex("MtdFormId")
                        .HasName("fk_approvel_form_idx");

                    b.ToTable("mtd_approval");
                });

            modelBuilder.Entity("Mtd.OrderMaker.Dbs.Entity.MtdApprovalStage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BlockParts")
                        .IsRequired()
                        .HasColumnName("block_parts")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("description")
                        .HasColumnType("varchar(512)");

                    b.Property<Guid>("MtdApprovalId")
                        .HasColumnName("mtd_approval")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("varchar(120)");

                    b.Property<int>("Stage")
                        .HasColumnName("stage")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnName("user_id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasName("id_UNIQUE");

                    b.HasIndex("MtdApprovalId")
                        .HasName("fk_stage_approval_idx");

                    b.HasIndex("UserId")
                        .HasName("IX_USER");

                    b.ToTable("mtd_approval_stage");
                });

            modelBuilder.Entity("Mtd.OrderMaker.Dbs.Entity.MtdCategoryForm", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("description")
                        .HasColumnType("varchar(512)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("varchar(120)");

                    b.Property<Guid>("ParentId")
                        .HasColumnName("parent")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasName("id_UNIQUE");

                    b.HasIndex("ParentId")
                        .HasName("fk_group_themself_idx");

                    b.ToTable("mtd_category_form");
                });

            modelBuilder.Entity("Mtd.OrderMaker.Dbs.Entity.MtdConfigFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("FileData")
                        .IsRequired()
                        .HasColumnName("file_data")
                        .HasColumnType("varbinary(max)");

                    b.Property<long>("FileSize")
                        .HasColumnName("file_size")
                        .HasColumnType("bigint");

                    b.Property<string>("FileType")
                        .IsRequired()
                        .HasColumnName("file_type")
                        .HasColumnType("varchar(45)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("varchar(45)");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasName("id_UNIQUE");

                    b.ToTable("mtd_config_file");
                });

            modelBuilder.Entity("Mtd.OrderMaker.Dbs.Entity.MtdConfigParam", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("varchar(45)");

                    b.Property<string>("Value")
                        .HasColumnName("value")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasName("id_UNIQUE");

                    b.ToTable("mtd_config_param");
                });

            modelBuilder.Entity("Mtd.OrderMaker.Dbs.Entity.MtdFilter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MtdFormId")
                        .HasColumnName("mtd_form")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Page")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("page")
                        .HasColumnType("int")
                        .HasDefaultValueSql("'1'");

                    b.Property<int>("PageSize")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("page_size")
                        .HasColumnType("int")
                        .HasDefaultValueSql("'10'");

                    b.Property<string>("SearchNumber")
                        .IsRequired()
                        .HasColumnName("searchNumber")
                        .HasColumnType("varchar(45)");

                    b.Property<string>("SearchText")
                        .IsRequired()
                        .HasColumnName("searchText")
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("ShowDate")
                        .HasColumnName("show_date")
                        .HasColumnType("bit");

                    b.Property<bool>("ShowNumber")
                        .HasColumnName("show_number")
                        .HasColumnType("bit");

                    b.Property<Guid>("UserId")
                        .HasColumnName("idUser")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("WaitList")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("waitlist")
                        .HasColumnType("int")
                        .HasDefaultValueSql("'0'");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasName("id_UNIQUE");

                    b.HasIndex("MtdFormId")
                        .HasName("mtd_filter_mtd_form_idx");

                    b.HasIndex("UserId")
                        .HasName("IX_INDEX_USER");

                    b.ToTable("mtd_filter");
                });

            modelBuilder.Entity("Mtd.OrderMaker.Dbs.Entity.MtdFilterColumn", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MtdFilterId")
                        .HasColumnName("mtd_filter")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MtdFormPartFieldId")
                        .HasColumnName("mtd_form_part_field")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Sequence")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("sequence")
                        .HasColumnType("int")
                        .HasDefaultValueSql("'0'");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasName("id_UNIQUE");

                    b.HasIndex("MtdFilterId")
                        .HasName("mtd_filter_column_idx");

                    b.HasIndex("MtdFormPartFieldId")
                        .HasName("mtd_roster_field_idx");

                    b.ToTable("mtd_filter_column");
                });

            modelBuilder.Entity("Mtd.OrderMaker.Dbs.Entity.MtdFilterDate", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnName("id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateEnd")
                        .HasColumnName("date_end")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DateStart")
                        .HasColumnName("date_start")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasName("id_UNIQUE");

                    b.ToTable("mtd_filter_date");
                });

            modelBuilder.Entity("Mtd.OrderMaker.Dbs.Entity.MtdFilterField", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MtdFilterId")
                        .HasColumnName("mtd_filter")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MtdFormPartFieldId")
                        .HasColumnName("mtd_form_part_field")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("MtdTerm")
                        .HasColumnName("mtd_term")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnName("value")
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasName("id_UNIQUE");

                    b.HasIndex("MtdFilterId")
                        .HasName("mtd_filter_idx");

                    b.HasIndex("MtdFormPartFieldId")
                        .HasName("mtd_filter_field_mtd_form_field_idx");

                    b.HasIndex("MtdTerm")
                        .HasName("mtd_filter_field_term_idx");

                    b.ToTable("mtd_filter_field");
                });

            modelBuilder.Entity("Mtd.OrderMaker.Dbs.Entity.MtdFilterScript", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Apply")
                        .HasColumnName("apply")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("description")
                        .HasColumnType("varchar(512)");

                    b.Property<Guid>("MtdFilterId")
                        .HasColumnName("mtd_filter")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("varchar(256)");

                    b.Property<string>("Script")
                        .IsRequired()
                        .HasColumnName("script")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasName("id_UNIQUE");

                    b.HasIndex("MtdFilterId")
                        .HasName("fk_script_filter_idx");

                    b.ToTable("mtd_filter_script");
                });

            modelBuilder.Entity("Mtd.OrderMaker.Dbs.Entity.MtdForm", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnName("active")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("description")
                        .HasColumnType("varchar(512)");

                    b.Property<Guid>("MtdCategoryId")
                        .HasColumnName("mtd_category")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("varchar(120)");

                    b.Property<int>("Sequence")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("sequence")
                        .HasColumnType("int")
                        .HasDefaultValueSql("'0'");

                    b.Property<bool>("VisibleDate")
                        .HasColumnName("visible_date")
                        .HasColumnType("bit");

                    b.Property<bool>("VisibleNumber")
                        .HasColumnName("visible_number")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasName("id_UNIQUE");

                    b.HasIndex("MtdCategoryId")
                        .HasName("fk_form_grooup_idx");

                    b.ToTable("mtd_form");
                });

            modelBuilder.Entity("Mtd.OrderMaker.Dbs.Entity.MtdFormDesk", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnName("id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ColorBack")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("color_back")
                        .HasColumnType("varchar(45)")
                        .HasDefaultValueSql("'gray'");

                    b.Property<string>("ColorFont")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("color_font")
                        .HasColumnType("varchar(45)")
                        .HasDefaultValueSql("'white'");

                    b.Property<byte[]>("Image")
                        .IsRequired()
                        .HasColumnName("image")
                        .HasColumnType("image");

                    b.Property<int>("ImageSize")
                        .HasColumnName("image_size")
                        .HasColumnType("int");

                    b.Property<string>("ImageType")
                        .IsRequired()
                        .HasColumnName("image_type")
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasName("id_UNIQUE");

                    b.ToTable("mtd_form_desk");
                });

            modelBuilder.Entity("Mtd.OrderMaker.Dbs.Entity.MtdFormHeader", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnName("id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Image")
                        .IsRequired()
                        .HasColumnName("image")
                        .HasColumnType("image");

                    b.Property<int>("ImageSize")
                        .HasColumnName("image_size")
                        .HasColumnType("int");

                    b.Property<string>("ImageType")
                        .IsRequired()
                        .HasColumnName("image_type")
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasName("id_UNIQUE");

                    b.ToTable("mtd_form_header");
                });

            modelBuilder.Entity("Mtd.OrderMaker.Dbs.Entity.MtdFormList", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnName("id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MtdFormId")
                        .HasColumnName("mtd_form")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasName("id_UNIQUE");

                    b.HasIndex("MtdFormId")
                        .HasName("fk_list_form_idx");

                    b.ToTable("mtd_form_list");
                });

            modelBuilder.Entity("Mtd.OrderMaker.Dbs.Entity.MtdFormPart", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnName("active")
                        .HasColumnType("bit");

                    b.Property<bool>("Child")
                        .HasColumnName("child")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("description")
                        .HasColumnType("varchar(512)");

                    b.Property<Guid>("MtdFormId")
                        .HasColumnName("mtd_form")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("MtdSysStyle")
                        .HasColumnName("mtd_sys_style")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("varchar(120)");

                    b.Property<int>("Sequence")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("sequence")
                        .HasColumnType("int")
                        .HasDefaultValueSql("'0'");

                    b.Property<bool>("Title")
                        .HasColumnName("title")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasName("id_UNIQUE");

                    b.HasIndex("MtdFormId")
                        .HasName("fk_mtd_form_part_mtd_form1_idx");

                    b.HasIndex("MtdSysStyle")
                        .HasName("fk_mtd_form_part_mtd_sys_style1_idx");

                    b.ToTable("mtd_form_part");
                });

            modelBuilder.Entity("Mtd.OrderMaker.Dbs.Entity.MtdFormPartField", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnName("active")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("description")
                        .HasColumnType("varchar(512)");

                    b.Property<Guid>("MtdFormPartId")
                        .HasColumnName("mtd_form_part")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("MtdSysType")
                        .HasColumnName("mtd_sys_type")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("varchar(120)");

                    b.Property<bool>("Required")
                        .HasColumnName("required")
                        .HasColumnType("bit");

                    b.Property<int>("Sequence")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("sequence")
                        .HasColumnType("int")
                        .HasDefaultValueSql("'0'");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasName("id_UNIQUE");

                    b.HasIndex("MtdFormPartId")
                        .HasName("fk_mtd_form_part_field_mtd_form_part1_idx");

                    b.HasIndex("MtdSysType")
                        .HasName("fk_mtd_form_part_field_mtd_sys_type1_idx");

                    b.ToTable("mtd_form_part_field");
                });

            modelBuilder.Entity("Mtd.OrderMaker.Dbs.Entity.MtdFormPartHeader", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnName("id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Image")
                        .IsRequired()
                        .HasColumnName("image")
                        .HasColumnType("image");

                    b.Property<int>("ImageSize")
                        .HasColumnName("image_size")
                        .HasColumnType("int");

                    b.Property<string>("ImageType")
                        .IsRequired()
                        .HasColumnName("image_type")
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasName("id_UNIQUE");

                    b.ToTable("mtd_form_part_header");
                });

            modelBuilder.Entity("Mtd.OrderMaker.Dbs.Entity.MtdGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("description")
                        .HasColumnType("varchar(512)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasName("id_UNIQUE");

                    b.ToTable("mtd_group");
                });

            modelBuilder.Entity("Mtd.OrderMaker.Dbs.Entity.MtdLogApproval", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("MtdStoreId")
                        .HasColumnName("mtd_store")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Result")
                        .HasColumnName("result")
                        .HasColumnType("int");

                    b.Property<Guid>("StageId")
                        .HasColumnName("stage")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Timecr")
                        .HasColumnName("timecr")
                        .HasColumnType("datetime");

                    b.Property<Guid>("UserId")
                        .HasColumnName("user_id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasName("id_UNIQUE");

                    b.HasIndex("MtdStoreId")
                        .HasName("fk_log_approval_store_idx");

                    b.HasIndex("StageId")
                        .HasName("fk_log_approval_stage_idx");

                    b.ToTable("mtd_log_approval");
                });

            modelBuilder.Entity("Mtd.OrderMaker.Dbs.Entity.MtdLogDocument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("MtdStoreId")
                        .HasColumnName("mtd_store")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("TimeCh")
                        .HasColumnName("timech")
                        .HasColumnType("datetime");

                    b.Property<Guid>("UserId")
                        .HasColumnName("user_id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnName("user_name")
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasName("id_UNIQUE");

                    b.HasIndex("MtdStoreId")
                        .HasName("fk_log_document_store_idx");

                    b.HasIndex("TimeCh")
                        .HasName("ix_date");

                    b.ToTable("mtd_log_document");
                });

            modelBuilder.Entity("Mtd.OrderMaker.Dbs.Entity.MtdStore", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnName("active")
                        .HasColumnType("bit");

                    b.Property<Guid>("MtdFormId")
                        .HasColumnName("mtd_form")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ParentNavigationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Sequence")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("sequence")
                        .HasColumnType("int")
                        .HasDefaultValueSql("'0'");

                    b.Property<DateTime>("Timecr")
                        .HasColumnName("timecr")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasName("id_UNIQUE");

                    b.HasIndex("MtdFormId")
                        .HasName("fk_mtd_store_mtd_form1_idx");

                    b.HasIndex("ParentNavigationId");

                    b.HasIndex("Timecr")
                        .HasName("IX_TIMECR");

                    b.HasIndex("MtdFormId", "Sequence")
                        .IsUnique()
                        .HasName("Seq_Unique");

                    b.ToTable("mtd_store");
                });

            modelBuilder.Entity("Mtd.OrderMaker.Dbs.Entity.MtdStoreApproval", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnName("id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Complete")
                        .HasColumnName("complete")
                        .HasColumnType("bit");

                    b.Property<Guid>("MtdApproveStageId")
                        .HasColumnName("md_approve_stage")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PartsApproved")
                        .IsRequired()
                        .HasColumnName("parts_approved")
                        .HasColumnType("text");

                    b.Property<int>("Result")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("result")
                        .HasColumnType("int")
                        .HasDefaultValueSql("'0'");

                    b.HasKey("Id");

                    b.HasIndex("Complete")
                        .HasName("IX_APPROVED");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasName("id_UNIQUE");

                    b.HasIndex("MtdApproveStageId")
                        .HasName("fk_store_approve_stage_idx");

                    b.ToTable("mtd_store_approval");
                });

            modelBuilder.Entity("Mtd.OrderMaker.Dbs.Entity.MtdStoreLink", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnName("id")
                        .HasColumnType("bigint");

                    b.Property<Guid>("MtdStoreId")
                        .HasColumnName("mtd_store")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Register")
                        .IsRequired()
                        .HasColumnType("varchar(768)");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasName("id_UNIQUE");

                    b.HasIndex("MtdStoreId")
                        .HasName("fk_mtd_store_link_mtd_store1_idx");

                    b.HasIndex("MtdStoreId", "Id")
                        .IsUnique()
                        .HasName("ix_unique");

                    b.ToTable("mtd_store_link");
                });

            modelBuilder.Entity("Mtd.OrderMaker.Dbs.Entity.MtdStoreOwner", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnName("id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnName("user_id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnName("user_name")
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasName("id_UNIQUE");

                    b.HasIndex("UserId")
                        .HasName("IX_USER");

                    b.ToTable("mtd_store_owner");
                });

            modelBuilder.Entity("Mtd.OrderMaker.Dbs.Entity.MtdStoreStack", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("MtdFormPartFieldId")
                        .HasColumnName("mtd_form_part_field")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MtdStoreId")
                        .HasColumnName("mtd_store")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasName("id_UNIQUE");

                    b.HasIndex("MtdFormPartFieldId")
                        .HasName("fk_mtd_store_stack_mtd_form_part_field1_idx");

                    b.HasIndex("MtdStoreId")
                        .HasName("fk_mtd_store_stack_mtd_store_idx");

                    b.HasIndex("MtdStoreId", "MtdFormPartFieldId")
                        .IsUnique()
                        .HasName("IX_UNIQUE");

                    b.ToTable("mtd_store_stack");
                });

            modelBuilder.Entity("Mtd.OrderMaker.Dbs.Entity.MtdStoreStackDate", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnName("id")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Register")
                        .HasColumnName("register")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasName("id_UNIQUE");

                    b.HasIndex("Register")
                        .HasName("IX_DATESTACK");

                    b.ToTable("mtd_store_stack_date");
                });

            modelBuilder.Entity("Mtd.OrderMaker.Dbs.Entity.MtdStoreStackDecimal", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnName("id")
                        .HasColumnType("bigint");

                    b.Property<decimal>("Register")
                        .HasColumnName("register")
                        .HasColumnType("decimal(20,2)");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasName("id_UNIQUE");

                    b.HasIndex("Register")
                        .HasName("IX_DECIMALREGISTER");

                    b.ToTable("mtd_store_stack_decimal");
                });

            modelBuilder.Entity("Mtd.OrderMaker.Dbs.Entity.MtdStoreStackFile", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnName("id")
                        .HasColumnType("bigint");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnName("file_name")
                        .HasColumnType("varchar(256)");

                    b.Property<int>("FileSize")
                        .HasColumnName("file_size")
                        .HasColumnType("int");

                    b.Property<string>("FileType")
                        .IsRequired()
                        .HasColumnName("file_type")
                        .HasColumnType("varchar(256)");

                    b.Property<byte[]>("Register")
                        .IsRequired()
                        .HasColumnName("register")
                        .HasColumnType("varbinary(max)");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasName("id_UNIQUE");

                    b.ToTable("mtd_store_stack_file");
                });

            modelBuilder.Entity("Mtd.OrderMaker.Dbs.Entity.MtdStoreStackInt", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnName("id")
                        .HasColumnType("bigint");

                    b.Property<int>("Register")
                        .HasColumnName("register")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasName("id_UNIQUE");

                    b.HasIndex("Register")
                        .HasName("IX_INTSTACK");

                    b.ToTable("mtd_store_stack_int");
                });

            modelBuilder.Entity("Mtd.OrderMaker.Dbs.Entity.MtdStoreStackText", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnName("id")
                        .HasColumnType("bigint");

                    b.Property<string>("Register")
                        .IsRequired()
                        .HasColumnName("register")
                        .HasColumnType("varchar(768)");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasName("category_id_UNIQUE");

                    b.HasIndex("Register")
                        .HasName("IX_REGISTER_TEXT");

                    b.ToTable("mtd_store_stack_text");
                });

            modelBuilder.Entity("Mtd.OrderMaker.Dbs.Entity.MtdSysStyle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active")
                        .HasColumnName("active")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("description")
                        .HasColumnType("varchar(512)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("varchar(120)");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasName("id_UNIQUE");

                    b.ToTable("mtd_sys_style");
                });

            modelBuilder.Entity("Mtd.OrderMaker.Dbs.Entity.MtdSysTerm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("varchar(45)");

                    b.Property<string>("Sign")
                        .IsRequired()
                        .HasColumnName("sign")
                        .HasColumnType("varchar(45)");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasName("id_UNIQUE");

                    b.ToTable("mtd_sys_term");
                });

            modelBuilder.Entity("Mtd.OrderMaker.Dbs.Entity.MtdSysType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active")
                        .HasColumnName("active")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("description")
                        .HasColumnType("varchar(512)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("varchar(120)");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasName("id_UNIQUE");

                    b.ToTable("mtd_sys_type");
                });

            modelBuilder.Entity("Mtd.OrderMaker.Dbs.Entity.MtdApproval", b =>
                {
                    b.HasOne("Mtd.OrderMaker.Dbs.Entity.MtdForm", "MtdFormNavigation")
                        .WithMany("MtdApproval")
                        .HasForeignKey("MtdFormId")
                        .HasConstraintName("fk_approvel_form")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Mtd.OrderMaker.Dbs.Entity.MtdApprovalStage", b =>
                {
                    b.HasOne("Mtd.OrderMaker.Dbs.Entity.MtdApproval", "MtdApprovalNavigation")
                        .WithMany("MtdApprovalStage")
                        .HasForeignKey("MtdApprovalId")
                        .HasConstraintName("fk_stage_approval")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Mtd.OrderMaker.Dbs.Entity.MtdFilter", b =>
                {
                    b.HasOne("Mtd.OrderMaker.Dbs.Entity.MtdForm", "MtdFormNavigation")
                        .WithMany("MtdFilter")
                        .HasForeignKey("MtdFormId")
                        .HasConstraintName("mtd_filter_mtd_form")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Mtd.OrderMaker.Dbs.Entity.MtdFilterColumn", b =>
                {
                    b.HasOne("Mtd.OrderMaker.Dbs.Entity.MtdFilter", "MtdFilterNavigation")
                        .WithMany("MtdFilterColumn")
                        .HasForeignKey("MtdFilterId")
                        .HasConstraintName("mtd_filter_column_mtd_field")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Mtd.OrderMaker.Dbs.Entity.MtdFormPartField", "MtdFormPartFieldNavigation")
                        .WithMany("MtdFilterColumn")
                        .HasForeignKey("MtdFormPartFieldId")
                        .HasConstraintName("mtd_roster_field")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Mtd.OrderMaker.Dbs.Entity.MtdFilterDate", b =>
                {
                    b.HasOne("Mtd.OrderMaker.Dbs.Entity.MtdFilter", "IdNavigation")
                        .WithOne("MtdFilterDate")
                        .HasForeignKey("Mtd.OrderMaker.Dbs.Entity.MtdFilterDate", "Id")
                        .HasConstraintName("fk_date_filter")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Mtd.OrderMaker.Dbs.Entity.MtdFilterField", b =>
                {
                    b.HasOne("Mtd.OrderMaker.Dbs.Entity.MtdFilter", "MtdFilterNavigation")
                        .WithMany("MtdFilterField")
                        .HasForeignKey("MtdFilterId")
                        .HasConstraintName("mtd_filter_field_mtd_field")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Mtd.OrderMaker.Dbs.Entity.MtdFormPartField", "MtdFormPartFieldNavigation")
                        .WithMany("MtdFilterField")
                        .HasForeignKey("MtdFormPartFieldId")
                        .HasConstraintName("mtd_filter_field_mtd_form_field")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Mtd.OrderMaker.Dbs.Entity.MtdSysTerm", "MtdTermNavigation")
                        .WithMany("MtdFilterField")
                        .HasForeignKey("MtdTerm")
                        .HasConstraintName("mtd_filter_field_mtd_term")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Mtd.OrderMaker.Dbs.Entity.MtdFilterScript", b =>
                {
                    b.HasOne("Mtd.OrderMaker.Dbs.Entity.MtdFilter", "MtdFilterNavigation")
                        .WithMany("MtdFilterScript")
                        .HasForeignKey("MtdFilterId")
                        .HasConstraintName("fk_script_filter")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Mtd.OrderMaker.Dbs.Entity.MtdForm", b =>
                {
                    b.HasOne("Mtd.OrderMaker.Dbs.Entity.MtdCategoryForm", "MtdCategoryNavigation")
                        .WithMany("MtdForm")
                        .HasForeignKey("MtdCategoryId")
                        .HasConstraintName("fk_form_grooup")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Mtd.OrderMaker.Dbs.Entity.MtdFormDesk", b =>
                {
                    b.HasOne("Mtd.OrderMaker.Dbs.Entity.MtdForm", "IdNavigation")
                        .WithOne("MtdFormDesk")
                        .HasForeignKey("Mtd.OrderMaker.Dbs.Entity.MtdFormDesk", "Id")
                        .HasConstraintName("fk_mtd_form_des_mtd_from")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Mtd.OrderMaker.Dbs.Entity.MtdFormHeader", b =>
                {
                    b.HasOne("Mtd.OrderMaker.Dbs.Entity.MtdForm", "IdNavigation")
                        .WithOne("MtdFormHeader")
                        .HasForeignKey("Mtd.OrderMaker.Dbs.Entity.MtdFormHeader", "Id")
                        .HasConstraintName("fk_image_form")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Mtd.OrderMaker.Dbs.Entity.MtdFormList", b =>
                {
                    b.HasOne("Mtd.OrderMaker.Dbs.Entity.MtdFormPartField", "IdNavigation")
                        .WithOne("MtdFormList")
                        .HasForeignKey("Mtd.OrderMaker.Dbs.Entity.MtdFormList", "Id")
                        .HasConstraintName("fk_list_field")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Mtd.OrderMaker.Dbs.Entity.MtdForm", "MtdFormNavigation")
                        .WithMany("MtdFormList")
                        .HasForeignKey("MtdFormId")
                        .HasConstraintName("fk_list_form")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Mtd.OrderMaker.Dbs.Entity.MtdFormPart", b =>
                {
                    b.HasOne("Mtd.OrderMaker.Dbs.Entity.MtdForm", "MtdFormNavigation")
                        .WithMany("MtdFormPart")
                        .HasForeignKey("MtdFormId")
                        .HasConstraintName("fk_mtd_form_part_mtd_form1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Mtd.OrderMaker.Dbs.Entity.MtdSysStyle", "MtdSysStyleNavigation")
                        .WithMany("MtdFormPart")
                        .HasForeignKey("MtdSysStyle")
                        .HasConstraintName("fk_mtd_form_part_mtd_sys_style1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Mtd.OrderMaker.Dbs.Entity.MtdFormPartField", b =>
                {
                    b.HasOne("Mtd.OrderMaker.Dbs.Entity.MtdFormPart", "MtdFormPartNavigation")
                        .WithMany("MtdFormPartField")
                        .HasForeignKey("MtdFormPartId")
                        .HasConstraintName("fk_mtd_form_part_field_mtd_form_part1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Mtd.OrderMaker.Dbs.Entity.MtdSysType", "MtdSysTypeNavigation")
                        .WithMany("MtdFormPartField")
                        .HasForeignKey("MtdSysType")
                        .HasConstraintName("fk_mtd_form_part_field_mtd_sys_type1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Mtd.OrderMaker.Dbs.Entity.MtdFormPartHeader", b =>
                {
                    b.HasOne("Mtd.OrderMaker.Dbs.Entity.MtdFormPart", "IdNavigation")
                        .WithOne("MtdFormPartHeader")
                        .HasForeignKey("Mtd.OrderMaker.Dbs.Entity.MtdFormPartHeader", "Id")
                        .HasConstraintName("fk_image_form_part")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Mtd.OrderMaker.Dbs.Entity.MtdLogApproval", b =>
                {
                    b.HasOne("Mtd.OrderMaker.Dbs.Entity.MtdStore", "MtdStoreNavigation")
                        .WithMany("MtdLogApproval")
                        .HasForeignKey("MtdStoreId")
                        .HasConstraintName("fk_log_approval_store")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Mtd.OrderMaker.Dbs.Entity.MtdApprovalStage", "StageNavigation")
                        .WithMany("MtdLogApproval")
                        .HasForeignKey("StageId")
                        .HasConstraintName("fk_log_approval_stage")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Mtd.OrderMaker.Dbs.Entity.MtdLogDocument", b =>
                {
                    b.HasOne("Mtd.OrderMaker.Dbs.Entity.MtdStore", "MtdStoreNavigation")
                        .WithMany("MtdLogDocument")
                        .HasForeignKey("MtdStoreId")
                        .HasConstraintName("fk_log_document_store")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Mtd.OrderMaker.Dbs.Entity.MtdStore", b =>
                {
                    b.HasOne("Mtd.OrderMaker.Dbs.Entity.MtdForm", "MtdFormNavigation")
                        .WithMany("MtdStore")
                        .HasForeignKey("MtdFormId")
                        .HasConstraintName("fk_mtd_store_mtd_form1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Mtd.OrderMaker.Dbs.Entity.MtdStore", "ParentNavigation")
                        .WithMany()
                        .HasForeignKey("ParentNavigationId");
                });

            modelBuilder.Entity("Mtd.OrderMaker.Dbs.Entity.MtdStoreApproval", b =>
                {
                    b.HasOne("Mtd.OrderMaker.Dbs.Entity.MtdStore", "IdNavigation")
                        .WithOne("MtdStoreApproval")
                        .HasForeignKey("Mtd.OrderMaker.Dbs.Entity.MtdStoreApproval", "Id")
                        .HasConstraintName("fk_store_approve")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Mtd.OrderMaker.Dbs.Entity.MtdApprovalStage", "MdApproveStageNavigation")
                        .WithMany("MtdStoreApproval")
                        .HasForeignKey("MtdApproveStageId")
                        .HasConstraintName("fk_store_approve_stage")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Mtd.OrderMaker.Dbs.Entity.MtdStoreLink", b =>
                {
                    b.HasOne("Mtd.OrderMaker.Dbs.Entity.MtdStoreStack", "IdNavigation")
                        .WithOne("MtdStoreLink")
                        .HasForeignKey("Mtd.OrderMaker.Dbs.Entity.MtdStoreLink", "Id")
                        .HasConstraintName("fk_mtd_store_link_mtd_store_stack")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Mtd.OrderMaker.Dbs.Entity.MtdStore", "MtdStoreNavigation")
                        .WithMany("MtdStoreLink")
                        .HasForeignKey("MtdStoreId")
                        .HasConstraintName("fk_mtd_store_link_mtd_store1")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Mtd.OrderMaker.Dbs.Entity.MtdStoreOwner", b =>
                {
                    b.HasOne("Mtd.OrderMaker.Dbs.Entity.MtdStore", "IdNavigation")
                        .WithOne("MtdStoreOwner")
                        .HasForeignKey("Mtd.OrderMaker.Dbs.Entity.MtdStoreOwner", "Id")
                        .HasConstraintName("fk_owner_store")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Mtd.OrderMaker.Dbs.Entity.MtdStoreStack", b =>
                {
                    b.HasOne("Mtd.OrderMaker.Dbs.Entity.MtdFormPartField", "MtdFormPartFieldNavigation")
                        .WithMany("MtdStoreStack")
                        .HasForeignKey("MtdFormPartFieldId")
                        .HasConstraintName("fk_mtd_store_stack_mtd_form_part_field1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Mtd.OrderMaker.Dbs.Entity.MtdStore", "MtdStoreNavigation")
                        .WithMany("MtdStoreStack")
                        .HasForeignKey("MtdStoreId")
                        .HasConstraintName("fk_mtd_store_stack_mtd_store")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Mtd.OrderMaker.Dbs.Entity.MtdStoreStackDate", b =>
                {
                    b.HasOne("Mtd.OrderMaker.Dbs.Entity.MtdStoreStack", "IdNavigation")
                        .WithOne("MtdStoreStackDate")
                        .HasForeignKey("Mtd.OrderMaker.Dbs.Entity.MtdStoreStackDate", "Id")
                        .HasConstraintName("fk_date_stack")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Mtd.OrderMaker.Dbs.Entity.MtdStoreStackDecimal", b =>
                {
                    b.HasOne("Mtd.OrderMaker.Dbs.Entity.MtdStoreStack", "IdNavigation")
                        .WithOne("MtdStoreStackDecimal")
                        .HasForeignKey("Mtd.OrderMaker.Dbs.Entity.MtdStoreStackDecimal", "Id")
                        .HasConstraintName("fk_decimal_stack")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Mtd.OrderMaker.Dbs.Entity.MtdStoreStackFile", b =>
                {
                    b.HasOne("Mtd.OrderMaker.Dbs.Entity.MtdStoreStack", "IdNavigation")
                        .WithOne("MtdStoreStackFile")
                        .HasForeignKey("Mtd.OrderMaker.Dbs.Entity.MtdStoreStackFile", "Id")
                        .HasConstraintName("fk_file_stack")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Mtd.OrderMaker.Dbs.Entity.MtdStoreStackInt", b =>
                {
                    b.HasOne("Mtd.OrderMaker.Dbs.Entity.MtdStoreStack", "IdNavigation")
                        .WithOne("MtdStoreStackInt")
                        .HasForeignKey("Mtd.OrderMaker.Dbs.Entity.MtdStoreStackInt", "Id")
                        .HasConstraintName("fk_int_stack")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Mtd.OrderMaker.Dbs.Entity.MtdStoreStackText", b =>
                {
                    b.HasOne("Mtd.OrderMaker.Dbs.Entity.MtdStoreStack", "IdNavigation")
                        .WithOne("MtdStoreStackText")
                        .HasForeignKey("Mtd.OrderMaker.Dbs.Entity.MtdStoreStackText", "Id")
                        .HasConstraintName("fk_text_stack")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
